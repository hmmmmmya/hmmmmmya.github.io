<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/06/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo使用说明</title>
    <url>/2024/06/11/hexo%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>一款博客框架hexo的安装和使用说明</p>
<span id="more"></span>

<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ol>
<li><p>安装<a href="https://nodejs.cn/download/">node.js</a></p>
</li>
<li><p>安装<a href="https://git-scm.com/download/win">git</a></p>
</li>
<li><p>安装hexo</p>
<p> <code>npm install -g hexo-cli</code></p>
</li>
</ol>
<h2 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化hexo项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ol>
<li><p>找一个自己喜欢的主题: <a href="https://hexo.io/themes/">hexo主题商店</a></p>
</li>
<li><p>使用<code>npm</code>直接安装到<code>node_modules</code>，或者<code>git clone</code>安装到<code>source/themes</code></p>
</li>
<li><p>修改主目录下的<code>_config.yml</code></p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span> <span class="comment"># 新主题名</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置GitHub-Pages"><a href="#配置GitHub-Pages" class="headerlink" title="配置GitHub Pages"></a>配置GitHub Pages</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- url: https://hmmmmmya.github.io</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">    type: git # 不要使用github</span><br><span class="line">    repo: git@github.com:hmmmmmya/hmmmmmya.github.io.git # 使用ssh连接</span><br><span class="line">    branch: main # 分支</span><br><span class="line">    message: add new blog # 自动部署commit备注，可不填</span><br></pre></td></tr></table></figure>

<p>注意url不能直接拷贝仓库地址<code>https://github.com/hmmmmmya/hmmmmmya.github.io</code>, 否则显示会有问题, 要写成<code>https://hmmmmmya.github.io</code></p>
<p>hexo使用git前要先安装<code>hexo-deployer-git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务本地预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建博客也可以在 <code>source/_posts</code>目录下创建markdown</p>
</li>
<li><p>本地调试用 <code>hexo g</code> 和 <code>hexo s</code>, 需要清除本地生成的内容则用<code>hexo clean</code></p>
</li>
<li><p>调试时修改并保存, 本地网页能动态加载的, 不需要再重新生成再加载</p>
</li>
<li><p>本地调试无问题后，使用 <code>hexo d</code>部署到GitHub。提交前要重新<code>hexo g</code>生成下</p>
</li>
<li><p><code>hexo clean</code>可用于提交代码时清除本地的public内容, 若配置了.gitignore则提交代码时可以不用此命令</p>
</li>
</ul>
<h2 id="hexo分类和标签"><a href="#hexo分类和标签" class="headerlink" title="hexo分类和标签"></a>hexo分类和标签</h2><h3 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h3><p>1.1 生成“分类”页并添加tpye属性<br>打开命令行，进入博客所在文件夹。执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories`</span><br></pre></td></tr></table></figure>

<p>成功后会提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure>

<p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line"><span class="section">date: 2017-05-27 13:47:40</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>按照更换的主题指示修改后</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line"><span class="section">date: 2024-06-07 17:19:12</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>创建分类成功，保存并关闭文件。</p>
<p>1.2 给文章添加“categories”属性<br>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 搭建博客</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">-</span> web前端</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> Hexo</span><br><span class="line"><span class="bullet">-</span> 博客</span><br><span class="line"><span class="section">date: 2024-06-07 17:01:12</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>这里<code>categories</code>自己随意修改，但只能有一个，不需要再修改<code>categories</code>目录的index文件。</p>
<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>2.1 生成“标签”页并添加tpye属性<br>打开命令行，进入博客所在文件夹。执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>默认内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: 标签</span><br><span class="line"><span class="section">date: 2017-05-27 14:22:08</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>修改后</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: tags</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line"><span class="section">date: 2024-06-07 17:20:13</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>创建标签成功，保存并关闭文件。</p>
<p>2.2 给文章添加“tags”属性</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 搭建博客</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">-</span> web前端</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> hexo</span><br><span class="line"><span class="bullet">-</span> 博客</span><br><span class="line"><span class="section">date: 2024-06-07 17:01:12</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>这里<code>tags</code>自己随意增加，不需要再修改<code>tags</code>目录的<code>index</code>文件。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://hexo.io/themes/">hexo themes</a><blockquote>
<p>主题商店</p>
</blockquote>
</li>
<li><a href="https://easyhexo.com/">easyhexo</a><blockquote>
<p>hexo使用指南</p>
</blockquote>
</li>
<li><a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md">hexo + github搭建个人博客教程</a><blockquote>
<p>搭建个人博客教程</p>
</blockquote>
</li>
<li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">Hexo使用攻略-添加分类及标签</a><blockquote>
<p>如何添加分类和标签</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建本地博客</title>
    <url>/2024/06/07/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>使用博客框架hexo搭建本地博客，可切换主题</p>
<span id="more"></span>

<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>安装<a href="https://nodejs.cn/download/">node.js</a></p>
<blockquote>
<p>Windows Powershell 检查是否安装成功: <code>node -v</code></p>
</blockquote>
<h2 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h2><p>使用nodejs的包管理工具npm安装hexo, 在终端Powershell中输入下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="三、初始化hexo"><a href="#三、初始化hexo" class="headerlink" title="三、初始化hexo"></a>三、初始化hexo</h2><p>自选合适的目录，新建文件夹folder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd folder</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="四、主题配置"><a href="#四、主题配置" class="headerlink" title="四、主题配置"></a>四、主题配置</h2><ul>
<li><p>安装主题</p>
<ul>
<li><p>以Ayer主题为例</p>
<ul>
<li><p><a href="https://github.com/Shen-Yu/hexo-theme-ayer">GitHub仓库</a></p>
</li>
<li><p><a href="https://easyhexo.com/2-Theme-use-and-config/2-19-hexo-theme-ayer/">安装步骤</a></p>
</li>
<li><p>注意 <code>npm i hexo-theme-ayer -S</code> 会安装到 <code>node_modules</code>, 用<code>git clone</code> 则是在<code>themes</code>下面，提交代码时要add  <code>node_modules/hexo-theme-*/</code>来包含自定义主题</p>
</li>
<li><p>注意安装后再使用 <code>npm update hexo-theme-ayer -S</code> 会覆盖当前主题, 自己的配置被覆盖!!! 不要npm更新, 或者先保存下该主题的配置文件(已经提交过的包含了上次的配置就还好)</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>切换主题</p>
<ul>
<li><p>修改主目录下的<code>_config.yml</code>文件配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: &lt;https://hexo.io/plugins/&gt;</span><br><span class="line">## Themes: &lt;https://hexo.io/themes/&gt;</span><br><span class="line">theme: ayer</span><br><span class="line"># theme: landscape</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>云访问博客</title>
    <url>/2024/06/12/%E4%BA%91%E8%AE%BF%E9%97%AE%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>使用 GitHub Pages作为博客的云服务器，实现云访问博客</p>
<span id="more"></span>

<h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>新建仓库，填写内容如下，<strong>特别注意红框位置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240520143122990.png" alt="image-20240520143122990"></p>
<p>保证仓库<strong>public</strong>，名称填写正确<strong>用户名.github.io</strong>，系统自动变更为<strong>Pages</strong></p>
<p>在仓库设置中找到<strong>Pages</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240520143142668.png" alt="image-20240520143142668"></p>
<p>记住仓库地址，我们会将本地的文件上传到仓库</p>
<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><h2 id="Hexo中配置GitHub"><a href="#Hexo中配置GitHub" class="headerlink" title="Hexo中配置GitHub"></a>Hexo中配置GitHub</h2><p>在Hexo项目主目录中修改<code>_config.yml</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> url: https://hmmmmmya.github.io</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line"><span class="code">    type: git # 不要使用github, 没有双引号</span></span><br><span class="line"><span class="code">    repo: git@github.com:hmmmmmya/hmmmmmya.github.io.git # 使用ssh连接</span></span><br><span class="line"><span class="code">    branch: main # 分支</span></span><br><span class="line"><span class="code">    message: add new blog # 自动部署commit备注，可不填</span></span><br></pre></td></tr></table></figure>

<p>注意url不能直接拷贝仓库地址<code>https://github.com/hmmmmmya/hmmmmmya.github.io</code>, 否则显示会有问题</p>
<p>url要写成<code>https://hmmmmmya.github.io</code></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git连接github</title>
    <url>/2024/06/11/git%E8%BF%9E%E6%8E%A5github/</url>
    <content><![CDATA[<p>配置git来连接GitHub</p>
<span id="more"></span>

<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><h3 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装Git</h3><p>安装<a href="https://git-scm.com/download/win">git</a></p>
<h3 id="二、本地生成SSH-keys"><a href="#二、本地生成SSH-keys" class="headerlink" title="二、本地生成SSH keys"></a>二、本地生成SSH keys</h3><ol>
<li><p>打开Git Bash</p>
</li>
<li><p>输入生成命令</p>
<p> <code>ssh-keygen -t ed25519 -C &quot;&lt;your_email@example.com&gt;&quot;</code></p>
</li>
<li><p>一路回车, 保存key到默认位置(<code>/c/Users/Users/.ssh/</code>)</p>
<blockquote>
<p>目录下有两个rsa文件, id_rsa 和 id_rsa.pub</p>
</blockquote>
</li>
</ol>
<h3 id="三、使用SSH-keys连接到GitHub"><a href="#三、使用SSH-keys连接到GitHub" class="headerlink" title="三、使用SSH keys连接到GitHub"></a>三、使用SSH keys连接到GitHub</h3><ol>
<li>选择 <code>GitHub Settings -&gt; SSH and GPG keys -&gt; New SSH key</code></li>
<li>复制本地的公钥<code>id_rsa.pub</code>到<code>New SSH key</code>, 起一个名字, 保存</li>
</ol>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>可以安装GitHub Desktop桌面端, 直接用图形化界面管理GitHub仓库</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>云访问图片</title>
    <url>/2024/06/12/%E4%BA%91%E8%AE%BF%E9%97%AE%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>使用 PicGo + GitHub + Typora 来搭建图床，实现云访问图片</p>
<span id="more"></span>

<p>图床简介:</p>
<p>如果没有图床，markdown插入图片的保存位置是本地，例如c盘某个位置，发布到网上后是找不到对应图片的。</p>
<p>图床将图片存储在云服务器，markdown插入图片在云服务器内的链接地址，这样任何人都可以访问到了。</p>
<h2 id="一、配置GitHub"><a href="#一、配置GitHub" class="headerlink" title="一、配置GitHub"></a>一、配置GitHub</h2><h3 id="1-1-创建一个新的仓库-用于存放图片"><a href="#1-1-创建一个新的仓库-用于存放图片" class="headerlink" title="1.1 创建一个新的仓库, 用于存放图片"></a>1.1 创建一个新的仓库, 用于存放图片</h3><p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612120448018.png" alt="image-20240612120448018"></p>
<p>填写仓库名称和描述，且仓库必须是public的，否则存储的图片不能正常访问。</p>
<h3 id="2-2-生成一个token，用于picGo访问github"><a href="#2-2-生成一个token，用于picGo访问github" class="headerlink" title="2.2 生成一个token，用于picGo访问github"></a>2.2 生成一个token，用于picGo访问github</h3><p>仓库 -&gt; settings</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612120807226.png" alt="image-20240612120807226"></p>
<p>选择Developer settings</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612120845815.png" alt="image-20240612120845815"></p>
<p>选择Personal access tokens</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612121032553.png" alt="image-20240612121032553"></p>
<p>点击右侧的Generate new token</p>
<p>把repo的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成token。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612121746408.png" alt="image-20240612121746408"></p>
<p><strong>注意:</strong> 这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。</p>
<h2 id="二、配置PicGo"><a href="#二、配置PicGo" class="headerlink" title="二、配置PicGo"></a>二、配置PicGo</h2><h3 id="2-1-下载PicGo"><a href="#2-1-下载PicGo" class="headerlink" title="2.1 下载PicGo"></a>2.1 下载PicGo</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">GitHub链接</a></p>
<h3 id="2-2-设置GitHub图床"><a href="#2-2-设置GitHub图床" class="headerlink" title="2.2 设置GitHub图床"></a>2.2 设置GitHub图床</h3><p>打开PicGo桌面应用，选择图床设置 -&gt; GitHub</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612122325497.png" alt="image-20240612122325497"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612141946042.png" alt="image-20240612141946042"></p>
<p><strong>注意:</strong></p>
<ul>
<li>仓库名的格式是<code>用户名/仓库</code>，比如我创建了一个叫做<code>test</code>的仓库，在PicGo里我要设定的仓库名就是<code>Molunerfinn/test</code>。</li>
<li>分支: 一般我们选择<code>main</code>分支即可。</li>
<li>设定Token: 将刚才保存的Token粘贴到这里</li>
<li>存储路径是GitHub仓库里面的指定目录</li>
<li>点击确定以生效，然后可以点击<code>设为默认图床</code>来确保上传的图床是GitHub。</li>
</ul>
<h3 id="2-3-使用cdn加速"><a href="#2-3-使用cdn加速" class="headerlink" title="2.3 使用cdn加速"></a>2.3 使用cdn加速</h3><h4 id="2-3-1-cdn简介"><a href="#2-3-1-cdn简介" class="headerlink" title="2.3.1 cdn简介"></a>2.3.1 cdn简介</h4><p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240612151908.png" alt="cdn分发原理图"></p>
<ul>
<li><p>CDN全称Content Delivery Network即内容分发网络，是一组分布在多个不同地方的WEB服务器，会根据用户距离的远近来选择最近的服务器 。</p>
</li>
<li><p>是一个免费、快速和可信赖的CDN加速服务，声称它每个月可以支撑680亿次的请求。服务在Github上是开源的。</p>
</li>
<li><p>只要我们的项目中用到了第三方的静态资源，譬如JavaScript脚本，css样式表，图片，图标，Flash等静态资源文件都应该考虑接入到CDN中</p>
</li>
<li><p>jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用</p>
</li>
</ul>
<h4 id="2-3-2-cdn使用"><a href="#2-3-2-cdn使用" class="headerlink" title="2.3.2 cdn使用"></a>2.3.2 cdn使用</h4><p>通过如下地址应用资源</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</span><br></pre></td></tr></table></figure>

<p>举个栗子,获取source&#x2F;bgimg路径下的back-rain.png</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/xiezhr/mycdn/source/bgimg/back-rain.png       ## 获取最新资源</span><br><span class="line">https://cdn.jsdelivr.net/gh/xiezhr/mycdn@1.0/source/bgimg/back-rain.png   ## 获取1.0版本的资源</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong> 版本号不是必需的，是为了区分新旧资源</p>
<h4 id="2-3-3-使用cdn加速PicGo中的静态资源"><a href="#2-3-3-使用cdn加速PicGo中的静态资源" class="headerlink" title="2.3.3 使用cdn加速PicGo中的静态资源"></a>2.3.3 使用cdn加速PicGo中的静态资源</h4><p>PicGo -&gt; 设置自定义域名</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main</span><br></pre></td></tr></table></figure>

<h3 id="2-4上传图片"><a href="#2-4上传图片" class="headerlink" title="2.4上传图片"></a>2.4上传图片</h3><p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612122804700.png" alt="image-20240612122804700"></p>
<p>至此配置完毕，已经可以使用了。当你上传的时候，你会发现你的仓库里也会增加新的图片了</p>
<h3 id="2-5-编辑相册的图片信息"><a href="#2-5-编辑相册的图片信息" class="headerlink" title="2.5 编辑相册的图片信息"></a>2.5 编辑相册的图片信息</h3><p>选择相册</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612122946564.png" alt="image-20240612122946564"></p>
<p>选择复制的链接格式</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612123028558.png" alt="image-20240612123028558"></p>
<h2 id="三、配置Typora"><a href="#三、配置Typora" class="headerlink" title="三、配置Typora"></a>三、配置Typora</h2><p>Typora偏好设置 -&gt; 图像</p>
<ol>
<li>插入图片时，选择上传图片，对本地图片应用上述规则</li>
<li>上传服务: 选择PicGo（app）</li>
<li>PicGo路径: 选择安装路径</li>
<li>验证: 验证图片上传选项</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/image-20240612140917028.png" alt="image-20240612140917028"></p>
<p>总结: github+picGo+typora他们三个是好基友</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul>
<li><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html">PicGo配置手册</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/489236769">使用Github+picGo搭建图床，保姆级教程</a></li>
<li><a href="https://www.cnblogs.com/xiezhr/p/17343616.html">如何使用jsDelivr+Github 实现免费CDN加速?</a></li>
</ul>
]]></content>
      <categories>
        <category>web后端</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>图床</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下搭建C++编译环境</title>
    <url>/2024/06/17/windows%E4%B8%8B%E6%90%AD%E5%BB%BACpp%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>using CMake + MinGW + VSCode</p>
<p>CMake is an open-source, cross-platform tool that uses compiler and platform independent configuration files to generate native build tool files specific to your compiler and platform.</p>
<p>The CMake Tools extension integrates Visual Studio Code and CMake to make it easy to configure, build, and debug your C++ project.</p>
<span id="more"></span>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol>
<li><p>安装VSCode</p>
<p> 配置VSCode终端<br> <img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240614104906.png" alt="配置VSCode终端"></p>
</li>
<li><p>安装VSCode插件C&#x2F;C++</p>
</li>
<li><p>安装VSCode插件CMake和CMake Tools</p>
<ul>
<li><p>CMake插件主要功能是CMake语法高亮、自动补全</p>
</li>
<li><p>CMake Tools的功能主要是结合VSCode IDE使用CMake这个工具，比如生成CMake项目、构建、调试CMake项目等。不能跨平台。</p>
</li>
</ul>
</li>
<li><p>安装CMake</p>
<p> The VS Code CMake Tools extension does its work by using CMake installed on your system. For best results, use CMake version 3.27 or greater.</p>
<p> 下载地址：<a href="https://cmake.org/download/">https://cmake.org/download/</a></p>
<p> 下载zip版本“cmake-3.xx-win64-x64.zip”，下载完成解压到指定目录并添加bin所在目录到环境变量。</p>
<p> 在终端输入“cmake –help”或 “cmake –version”查看是否配置成功。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240614105048.png" alt="查看cmake是否配置成功"></p>
</li>
<li><p>安装编译器MinGW</p>
<ul>
<li><p>MSVC即Microsoft Visual C++ Compiler，即微软自己的编译器。</p>
</li>
<li><p>MinGW则是指Minimalist GNU for Windows的缩写它是将GNU开发工具移植到Win32平台下的产物，即一套Windows上的GNU工具集。能够跨平台，能够在linux、arm等平台使用，这些平台使用的编译器都是g++、gcc。</p>
</li>
<li><p>跨平台开发的话，用的库基本上一定是Linux能用的库，而Linux能用的库一定是在mingw下支持会比较好。</p>
</li>
<li><p>MinGW-w64</p>
<p>  下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/</a></p>
<p>  页面往下滑，选择MinGW-W64 Online Installer下面的最新版本，现在是MinGW-W64 GCC-8.1.0</p>
<p>  推荐下载 离线版本“x86_64-posix-seh”</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240614110612.png" alt="选择mingw版本"></p>
<p>  下载完成解压到指定目录并添加bin所在目录到环境变量。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240614111327.png" alt="添加到环境变量"></p>
<p>  将mingw64\bin目录下的“mingw32-make.exe”复制一份并改名为 “make.exe”，就可以在终端直接使用 “make”指令而不必使用“mingw32-make”指令。</p>
<p>  在终端输入 “gcc -v”（或输入“make -v”查看版本信息）</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240614111656.png" alt="make -v"></p>
</li>
</ul>
</li>
<li><p>VSCode配置</p>
<p> 两种方式配置CMake Tools extension，参考Ref_1</p>
<ul>
<li>Use CMake Presets (recommended)<ul>
<li>通过JSON配置，可以跨IDE和操作系统使用</li>
</ul>
</li>
<li>Use CMake Kits&#x2F;Variants</li>
</ul>
</li>
</ol>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol>
<li><a href="https://code.visualstudio.com/docs/cpp/CMake-linux">CMake Tools for VSCode documentation</a></li>
<li><a href="https://vector-of-bool.github.io/docs/vscode-cmake-tools/getting_started.html#">vscode-cmake-tools getting started</a></li>
<li><a href="https://blog.csdn.net/dcrmg/article/details/103918543">windows下 CMake+MinGW 搭建C&#x2F;C++编译环境</a></li>
</ol>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode插件推荐</title>
    <url>/2024/06/17/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<p>自用vscode插件推荐</p>
<span id="more"></span>

<ul>
<li><p>中文</p>
<ul>
<li>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</li>
</ul>
</li>
<li><p>主题</p>
<ul>
<li>Material Icon Theme (图标)</li>
<li>Night Owl (主题)</li>
<li>One Dark Pro (主题)</li>
</ul>
</li>
<li><p>C++</p>
<ul>
<li>C&#x2F;C++ Extension Pack<ul>
<li>包含了C++最受欢迎的扩展, 如C&#x2F;C++, C&#x2F;C++ Themes, CMake, CMake Tools</li>
</ul>
</li>
<li>C&#x2F;C++<ul>
<li>C++ 编译、调试 (需提前安装编译工具, 如MinGW)</li>
</ul>
</li>
<li>CMake<ul>
<li>语法高亮, 代码补全</li>
</ul>
</li>
<li>CMake Tools<ul>
<li>CMake工具包</li>
</ul>
</li>
</ul>
</li>
<li><p>文件路径</p>
<ul>
<li>Path Intellisense</li>
</ul>
</li>
<li><p>Git</p>
<ul>
<li>GitLens (查看修改, Git blame)</li>
</ul>
</li>
<li><p>SVN</p>
<ul>
<li>SVN</li>
<li>SVN Lens (SVN blame)</li>
</ul>
</li>
<li><p>项目管理</p>
<ul>
<li>Project Manager (项目之间快速切换, 支持标签)</li>
</ul>
</li>
<li><p>远程</p>
<ul>
<li>Remote - SSH</li>
</ul>
</li>
<li><p>代码补全</p>
<ul>
<li>Codeium (支持多行代码补全)</li>
</ul>
</li>
<li><p>Markdown</p>
<ul>
<li>Markdown All in One (markdown快速编辑)</li>
<li>markdownlint (markdown语法检查、格式化)</li>
</ul>
</li>
<li><p>格式化</p>
<ul>
<li>Prettier - Code formatter</li>
<li>markdownlint (markdown)</li>
</ul>
</li>
<li><p>Docker</p>
<ul>
<li>Docker</li>
</ul>
</li>
<li><p>Rust</p>
<ul>
<li>rust-analyzer</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vscode调试rust项目</title>
    <url>/2024/06/20/%E4%BD%BF%E7%94%A8vscode%E8%B0%83%E8%AF%95rust%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>windows下, 使用vscode调试rust项目</p>
<p>工具: vscode, rust-analyzer插件, rust环境</p>
<span id="more"></span>

<ul>
<li><p>安装vscode插件: rust-analyzer</p>
</li>
<li><p>创建rust项目</p>
<ul>
<li>终端输入命令 <code>cargo new ProjectName</code></li>
</ul>
</li>
<li><p>使用<code>cargo run</code>或者<code>cargo build</code>命令编译项目, 生成可执行文件<code>target/debug/ProjectName.exe</code></p>
<p> 注意: 必须编译通过生成可执行文件后才能进行debug</p>
</li>
<li><p>创建 launch.json文件</p>
<ul>
<li><p>debug点击创建 launch.json文件<br><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240620164934.png" alt="创建 launch.json文件"></p>
</li>
<li><p>调试器选择LLDB (rust调试器为LLDB)</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240620165044.png" alt="调试器选择LLDB"></p>
<ul>
<li>选择yes, 调试环境会自动配置好</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240620165225.png" alt="选择yes"></p>
</li>
<li><p>设置断点</p>
</li>
<li><p>F5或者 运行-&gt;终端-&gt;开启调试</p>
</li>
<li><p>在左侧查看debug的变量和堆栈<br> <img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240620150545.png" alt="debug结果"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>rust</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vscode连接wsl2</title>
    <url>/2024/06/21/%E4%BD%BF%E7%94%A8vscode%E8%BF%9E%E6%8E%A5wsl2/</url>
    <content><![CDATA[<p>适用于 Linux 的 Windows 子系统 (WSL) 是 Windows 的一项功能，可用于在 Windows 计算机上运行 Linux 环境，而无需单独的虚拟机或双引导。 WSL 旨在为希望同时使用 Windows 和 Linux 的开发人员提供无缝高效的体验。比 VMWare 或 Virtual Box 等虚拟机更轻量, 最主要是Windows原生支持。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>开发人员可以在 Windows 计算机上同时访问 Windows 和 Linux 的强大功能。</p>
<ul>
<li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install#step-1---enable-the-windows-subsystem-for-linux">安装 WSL2</a></li>
</ul>
<h2 id="管理-Linux"><a href="#管理-Linux" class="headerlink" title="管理 Linux"></a>管理 Linux</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands">WSL 的基本命令</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">将目录更改为主页</span><br><span class="line">Help 命令</span><br><span class="line">以特定用户的身份运行</span><br><span class="line">更改发行版的默认用户</span><br><span class="line">标识 IP 地址</span><br><span class="line">导出分发版</span><br><span class="line">导入分发版</span><br><span class="line">就地导入发行版</span><br><span class="line">装载磁盘或设备</span><br><span class="line">卸载磁盘</span><br><span class="line">已弃用的 WSL 命令</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出可用(可在线安装)的 Linux 发行版</td>
<td><code>wsl --list --online</code></td>
</tr>
<tr>
<td>列出已安装的 Linux 发行版</td>
<td><code>wsl --list --verbose</code></td>
</tr>
<tr>
<td>安装指定 Linux 发行版</td>
<td><code>wsl --install &lt;Distribution Name&gt;</code></td>
</tr>
<tr>
<td>检查正在运行的 WSL 版本</td>
<td><code>wsl -l -v</code></td>
</tr>
<tr>
<td>将 WSL 版本设置为 1 或 2</td>
<td><code>wsl --set-version &lt;distribution name&gt; &lt;versionNumber&gt;</code></td>
</tr>
<tr>
<td>检查 WSL 版本</td>
<td><code>wsl --version</code></td>
</tr>
<tr>
<td>设置默认版本为 WSL 1 或 WSL 2</td>
<td><code>wsl --set-default-version &lt;Version#&gt;</code>，将 <code>Version#</code> 替换为 1 或 2</td>
</tr>
<tr>
<td>检查 WSL 状态</td>
<td><code>wsl --status</code></td>
</tr>
<tr>
<td>更新 WSL</td>
<td><code>wsl --update</code></td>
</tr>
<tr>
<td>设置默认 Linux 发行版</td>
<td><code>wsl --set-default &lt;Distribution Name&gt;</code></td>
</tr>
<tr>
<td>通过 PowerShell 或 CMD 运行特定的 Linux 发行版</td>
<td><code>wsl --distribution &lt;Distribution Name&gt; --user &lt;User Name&gt;</code></td>
</tr>
<tr>
<td>关闭</td>
<td><code>wsl --shutdown</code></td>
</tr>
<tr>
<td>Terminate</td>
<td><code>wsl --terminate &lt;Distribution Name&gt;</code></td>
</tr>
<tr>
<td>注销或卸载 Linux 发行版</td>
<td><code>wsl --unregister &lt;DistributionName&gt;</code></td>
</tr>
</tbody></table>
<h3 id="设置-Linux-用户名和密码"><a href="#设置-Linux-用户名和密码" class="headerlink" title="设置 Linux 用户名和密码"></a>设置 Linux 用户名和密码</h3><p>参考: <a href="https://learn.microsoft.com/zh-cn/windows/wsl/setup/environment#set-up-your-linux-username-and-password">https://learn.microsoft.com/zh-cn/windows/wsl/setup/environment#set-up-your-linux-username-and-password</a></p>
<h3 id="vscode中连接wsl"><a href="#vscode中连接wsl" class="headerlink" title="vscode中连接wsl"></a>vscode中连接wsl</h3><ul>
<li><p>安装 WSL 插件</p>
</li>
<li><p>安装 Remote - SSH 插件</p>
</li>
<li><p>F9输入<code>WSL</code>, 选择<code>WSL:Connect to WSL using Distro</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240621145853.png" alt="命名面板输入WSL"></p>
</li>
<li><p>选择已安装的版本</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240621145749.png" alt="选择已安装的版本"></p>
</li>
<li><p>连接成功后, 打开wsl文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240621150828.png" alt="打开wsl文件夹"></p>
</li>
</ul>
<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ul>
<li><p>wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。</p>
<ul>
<li><code>wsl.exe --update</code></li>
</ul>
</li>
<li><p>进入不了root</p>
<ul>
<li>使用sudo su进入root, 账号密码都是创建时的, 即管理员账号</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hmmmmmya/MyResources@main/typora/20240621143616.png" alt="使用sudo su进入root"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>wsl2</tag>
      </tags>
  </entry>
</search>
